class UnderstandMetrics(object):
	"""docstring for UnderstandMetrics"""
	def __init__(self, metrics):
		super(UnderstandMetrics, self).__init__()
		self.framework = metrics[0]
		self.sample = metrics[1]
		self.avgCyclomatic = metrics[2]
		self.avgCyclomaticModified = metrics[3]
		self.avgCyclomaticStrict = metrics[4]
		self.avgEssential = metrics[5]
		self.avgLine = metrics[6]
		self.avgLineBlank = metrics[7]
		self.avgLineCode = metrics[8]
		self.avgLineComment = metrics[9]
		self.countClassBase = metrics[10]
		self.countClassCoupled = metrics[11]
		self.countClassCoupledModified = metrics[12]
		self.countClassDerived = metrics[13]
		self.countDeclClass = metrics[14]
		self.countDeclClassMethod = metrics[15]
		self.countDeclClassVariable = metrics[16]
		self.countDeclExecutableUnit = metrics[17]
		self.countDeclFile = metrics[18]
		self.countDeclFunction = metrics[19]
		self.countDeclInstanceMethod = metrics[20]
		self.countDeclInstanceVariable = metrics[21]
		self.countDeclMethod = metrics[22]
		self.countDeclMethodAll = metrics[23]
		self.countDeclMethodDefault = metrics[24]
		self.countDeclMethodPrivate = metrics[25]
		self.countDeclMethodProtected = metrics[26]
		self.countDeclMethodPublic = metrics[27]
		self.countInput = metrics[28]
		self.countLine = metrics[29]
		self.countLineBlank = metrics[30]
		self.countLineCode = metrics[31]
		self.countLineCodeDecl = metrics[32]
		self.countLineCodeExe = metrics[33]
		self.countLineComment = metrics[34]
		self.countOutput = metrics[35]
		self.countPath = metrics[36]
		self.countPathLog = metrics[37]
		self.countSemicolon = metrics[38]
		self.countStmt = metrics[39]
		self.countStmtDecl = metrics[40]
		self.countStmtExe = metrics[41]
		self.cyclomatic = metrics[42]
		self.cyclomaticModified = metrics[43]
		self.CyclomaticStrict = metrics[44]
		self.essential = metrics[45]
		self.knots = metrics[46]
		self.maxCyclomatic = metrics[47]
		self.maxCyclomaticModified = metrics[48]
		self.maxCyclomaticStrict = metrics[49]
		self.maxEssential = metrics[50]
		self.maxEssentialKnots = metrics[51]
		self.maxInheritanceTree = metrics[52]
		self.maxNesting = metrics[53]
		self.minEssentialKnots = metrics[54]
		self.percentLackOfCohesion = metrics[55]
		self.percentLackOfCohesionModified = metrics[56]
		self.ratioCommentToCode = metrics[57]
		self.sumCyclomatic = metrics[58]
		self.sumCyclomaticModified = metrics[59]
		self.sumCyclomaticStrict = metrics[60]
		self.sumEssential = metrics[61]
		self.countJavaFile = metrics[63]


	def __iter__(self):
		for attr, value in self.__dict__.iteritems():
			yield attr, value